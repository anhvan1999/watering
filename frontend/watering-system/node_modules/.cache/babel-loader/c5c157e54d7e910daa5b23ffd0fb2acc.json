{"ast":null,"code":"import axios from '../utils/axios-instance';\nimport { loginUser, logoutUser, getNewToken } from '../redux-store/actions/user-actions';\nimport store from '../redux-store/store';\n/**\n * Expire time\n */\n\nconst jwtTimeout = 1 * 3500 * 1000;\nconst jwtRefreshTimeout = 7 * 24 * 3600 * 1000 - 60 * 1000;\n/**\n * \n * @param {string} username \n * @param {string} password \n * @param {function} resolve \n * @param {function} reject \n */\n\nexport function usernamePasswordLogin(username, password, resolve, reject) {\n  axios.post(process.env.REACT_APP_AUTH_URL, {\n    username,\n    password\n  }).then(res => {\n    // Save info to session storage and local storage\n    sessionStorage.setItem(\"jwtExpireDate\", new Date(res.data.issueDate).getTime() + jwtTimeout);\n    sessionStorage.setItem(\"jwtToken\", res.data.jwtToken);\n    localStorage.setItem(\"username\", username);\n    localStorage.setItem(\"jwtRefreshExpireDate\", new Date(res.data.issueDate).getTime() + jwtRefreshTimeout);\n    localStorage.setItem(\"jwtRefreshToken\", res.data.jwtRefreshToken); // Save to redux\n\n    store.dispatch(loginUser(username, res.data.jwtToken)); // Login Behavior\n\n    if (resolve) {\n      resolve(res);\n    }\n  }).catch(err => {\n    // Reject behavior\n    if (reject) {\n      reject(err);\n    }\n  });\n}\nexport function logout() {\n  // Clear session and local storage\n  store.dispatch(logoutUser());\n  sessionStorage.clear();\n  localStorage.clear();\n}\nconsole.log(process.env.REACT_APP_REFRESH_URL);\nexport function setAuthState() {\n  // Get expireDate and refreshExpireDate from storage\n  let jwtExpireStr = sessionStorage.getItem('jwtExpireDate');\n  let jwtRefreshExpireStr = localStorage.getItem('jwtRefreshExpireDate'); // Check\n\n  console.log(jwtExpireStr, jwtRefreshExpireStr); // If both are null -> logout and return\n\n  if (!jwtExpireStr && !jwtRefreshExpireStr) {\n    logout();\n    return;\n  } // Parse to date\n\n\n  let jwtExpireDate = new Date(Number(jwtExpireStr));\n  let jwtRefreshExpireDate = new Date(Number(jwtRefreshExpireStr));\n  let now = new Date(); // Check\n\n  console.log(jwtExpireDate, jwtRefreshExpireDate); // If jwt token is valid\n\n  if (jwtExpireStr && jwtExpireDate > now) {\n    return;\n  } // Get new token\n\n\n  if (jwtRefreshExpireStr && jwtRefreshExpireDate > now) {\n    axios.post(process.env.REACT_APP_REFRESH_URL, {\n      refreshToken: localStorage.getItem('jwtRefreshToken')\n    }).then(res => {\n      store.dispatch(getNewToken(res.data.newToken));\n      sessionStorage.setItem(\"jwtToken\", res.data.newToken);\n      sessionStorage.setItem('jwtExpireDate', new Date(res.data.issueDate) + jwtTimeout);\n    }).catch(err => {\n      console.log(err);\n      logout();\n    });\n    return;\n  } // If jwtRefreshtoken is not valid, logout\n\n\n  logout();\n}\nsetInterval(setAuthState, 60000);","map":{"version":3,"sources":["/home/trongtrung/Shoto-kun/TTDADN/watering-system/frontend/watering-system/src/service/auth-service.js"],"names":["axios","loginUser","logoutUser","getNewToken","store","jwtTimeout","jwtRefreshTimeout","usernamePasswordLogin","username","password","resolve","reject","post","process","env","REACT_APP_AUTH_URL","then","res","sessionStorage","setItem","Date","data","issueDate","getTime","jwtToken","localStorage","jwtRefreshToken","dispatch","catch","err","logout","clear","console","log","REACT_APP_REFRESH_URL","setAuthState","jwtExpireStr","getItem","jwtRefreshExpireStr","jwtExpireDate","Number","jwtRefreshExpireDate","now","refreshToken","newToken","setInterval"],"mappings":"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","sourcesContent":["import axios from '../utils/axios-instance';\nimport { loginUser, logoutUser, getNewToken } from '../redux-store/actions/user-actions';\nimport store from '../redux-store/store';\n\n/**\n * Expire time\n */\nconst jwtTimeout = 1 * 3500 * 1000;\nconst jwtRefreshTimeout = 7 * 24 * 3600 * 1000 - 60 * 1000;\n\n/**\n * \n * @param {string} username \n * @param {string} password \n * @param {function} resolve \n * @param {function} reject \n */\nexport function usernamePasswordLogin(username, password, resolve, reject) {\n    axios.post(process.env.REACT_APP_AUTH_URL, {\n        username, password\n    }).then(res => {\n        // Save info to session storage and local storage\n        sessionStorage.setItem(\"jwtExpireDate\", new Date(res.data.issueDate).getTime() + jwtTimeout);\n        sessionStorage.setItem(\"jwtToken\", res.data.jwtToken);\n        localStorage.setItem(\"username\", username);\n        localStorage.setItem(\"jwtRefreshExpireDate\", new Date(res.data.issueDate).getTime() + jwtRefreshTimeout);\n        localStorage.setItem(\"jwtRefreshToken\", res.data.jwtRefreshToken);\n\n        // Save to redux\n        store.dispatch(loginUser(username, res.data.jwtToken));\n\n        // Login Behavior\n        if (resolve) {\n            resolve(res);\n        }\n    }).catch(err => {\n        // Reject behavior\n        if (reject) {\n            reject(err);\n        }\n    });\n}\n\nexport function logout() {\n    // Clear session and local storage\n    store.dispatch(logoutUser());\n    sessionStorage.clear();\n    localStorage.clear();\n}\n\nconsole.log(process.env.REACT_APP_REFRESH_URL);\n\nexport function setAuthState() {\n    // Get expireDate and refreshExpireDate from storage\n    let jwtExpireStr = sessionStorage.getItem('jwtExpireDate');\n    let jwtRefreshExpireStr = localStorage.getItem('jwtRefreshExpireDate');\n\n    // Check\n    console.log(jwtExpireStr, jwtRefreshExpireStr);\n\n    // If both are null -> logout and return\n    if (!jwtExpireStr && !jwtRefreshExpireStr) {\n        logout();\n        return;\n    }\n\n    // Parse to date\n    let jwtExpireDate = new Date(Number(jwtExpireStr));\n    let jwtRefreshExpireDate = new Date(Number(jwtRefreshExpireStr));\n    let now = new Date();\n\n    // Check\n    console.log(jwtExpireDate, jwtRefreshExpireDate);\n\n    // If jwt token is valid\n    if (jwtExpireStr && jwtExpireDate > now) {\n        return;\n    }\n\n    // Get new token\n    if (jwtRefreshExpireStr && jwtRefreshExpireDate > now) {\n        axios.post(process.env.REACT_APP_REFRESH_URL, {\n            refreshToken: localStorage.getItem('jwtRefreshToken')\n        }).then(res => {\n            store.dispatch(getNewToken(res.data.newToken));\n            sessionStorage.setItem(\"jwtToken\", res.data.newToken);\n            sessionStorage.setItem('jwtExpireDate', new Date(res.data.issueDate) + jwtTimeout);\n        }).catch(err => {\n            console.log(err);\n            logout();\n        });\n        return;\n    }\n\n    // If jwtRefreshtoken is not valid, logout\n    logout();\n}\n\nsetInterval(setAuthState, 60000);\n"]},"metadata":{},"sourceType":"module"}