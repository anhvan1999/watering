{"ast":null,"code":"import { actionTypes } from '../actions/motor-actions';\n\nfunction objectmotor(motorid, data) {\n  this.motorid = motorid;\n  this.data = data;\n}\n\nlet defaultState = [];\n\nfunction motorReducer(state = defaultState, action) {\n  if (action.type === actionTypes.TAKE_DATA_MOTOR) {\n    state = state.slice();\n    let found = false;\n\n    for (let i = 0; i < state.length; i++) {\n      if (action.data.motor.deviceId === state[i].motorid) {\n        state[i].data = action.data;\n        found = true;\n        break;\n      }\n    }\n\n    if (!found) {\n      let obj = new objectmotor(action.data.motor.deviceId, action.data);\n      state.push(obj);\n    }\n  }\n\n  return state;\n}\n\nexport default motorReducer;","map":{"version":3,"sources":["/home/trongtrung/Shoto-kun/TTDADN/watering-system/frontend/watering-system/src/redux-store/reducers/motor-reducer.js"],"names":["actionTypes","objectmotor","motorid","data","defaultState","motorReducer","state","action","type","TAKE_DATA_MOTOR","slice","found","i","length","motor","deviceId","obj","push"],"mappings":"AAAA,SAAQA,WAAR,QAA0B,0BAA1B;;AAEA,SAASC,WAAT,CAAsBC,OAAtB,EAA8BC,IAA9B,EAAoC;AAChC,OAAKD,OAAL,GAAeA,OAAf;AACA,OAAKC,IAAL,GAAYA,IAAZ;AACH;;AAED,IAAIC,YAAY,GAAG,EAAnB;;AAEA,SAASC,YAAT,CAAsBC,KAAK,GAAGF,YAA9B,EAA4CG,MAA5C,EAAoD;AAChD,MAAIA,MAAM,CAACC,IAAP,KAAgBR,WAAW,CAACS,eAAhC,EAAiD;AAC7CH,IAAAA,KAAK,GAAGA,KAAK,CAACI,KAAN,EAAR;AACA,QAAIC,KAAK,GAAG,KAAZ;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,KAAK,CAACO,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACnC,UAAIL,MAAM,CAACJ,IAAP,CAAYW,KAAZ,CAAkBC,QAAlB,KAA+BT,KAAK,CAACM,CAAD,CAAL,CAASV,OAA5C,EAAoD;AAChDI,QAAAA,KAAK,CAACM,CAAD,CAAL,CAAST,IAAT,GAAgBI,MAAM,CAACJ,IAAvB;AACAQ,QAAAA,KAAK,GAAE,IAAP;AACA;AACH;AACJ;;AACD,QAAI,CAACA,KAAL,EACA;AACI,UAAIK,GAAG,GAAG,IAAIf,WAAJ,CAAiBM,MAAM,CAACJ,IAAP,CAAYW,KAAZ,CAAkBC,QAAnC,EAA6CR,MAAM,CAACJ,IAApD,CAAV;AACAG,MAAAA,KAAK,CAACW,IAAN,CAAWD,GAAX;AACH;AACJ;;AAED,SAAOV,KAAP;AACH;;AAED,eAAeD,YAAf","sourcesContent":["import {actionTypes} from '../actions/motor-actions'\n\nfunction objectmotor (motorid,data) {\n    this.motorid = motorid\n    this.data = data\n}\n\nlet defaultState = [];\n\nfunction motorReducer(state = defaultState, action) {\n    if (action.type === actionTypes.TAKE_DATA_MOTOR) {\n        state = state.slice();\n        let found = false;\n        for (let i = 0; i < state.length; i++) {\n            if (action.data.motor.deviceId === state[i].motorid){\n                state[i].data = action.data;\n                found= true;\n                break;\n            }\n        }\n        if (!found) \n        {   \n            let obj = new objectmotor (action.data.motor.deviceId, action.data);\n            state.push(obj);\n        }\n    }\n   \n    return state;\n}\n\nexport default motorReducer;\n"]},"metadata":{},"sourceType":"module"}