{"ast":null,"code":"import SockJS from 'sockjs-client';\nimport Stomp from 'stompjs';\nimport store from '../redux-store/store';\nimport { takeDataSensor } from '../redux-store/actions/sensor-actions'; // Create connection via sockjs and stompjs\n\nconst sock = new SockJS(process.env.REACT_APP_API_ROOT + '/stomp');\nconst stompClient = Stomp.over(sock); // On connected\n\nstompClient.connect({}, frame => {\n  console.log(\"connected\", frame);\n  stompClient.subscribe(\"/topic/info\", data => {\n    console.log(\"receive\", data);\n  });\n  stompClient.subscribe(\"/topic/sensor\", data => {\n    let sensorData = JSON.parse(data.body);\n    store.dispatch(takeDataSensor(sensorData));\n  });\n  stompClient.subscribe(\"/topic/motor/status\", data => {\n    let motorData = JSON.parse(data.body);\n    console.log(motorData);\n  });\n  send({\n    deviceId: 'Speaker',\n    value: 2222\n  }, '/app/motor/control');\n});\n\nfunction send(dataObject, topic) {\n  stompClient.send(topic, {}, JSON.stringify(dataObject));\n}\n\nexport default stompClient;","map":{"version":3,"sources":["/home/trongtrung/Shoto-kun/TTDADN/watering-system/frontend/watering-system/src/service/ws-service.js"],"names":["SockJS","Stomp","store","takeDataSensor","sock","process","env","REACT_APP_API_ROOT","stompClient","over","connect","frame","console","log","subscribe","data","sensorData","JSON","parse","body","dispatch","motorData","send","deviceId","value","dataObject","topic","stringify"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,eAAnB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,KAAP,MAAkB,sBAAlB;AACA,SAASC,cAAT,QAA+B,uCAA/B,C,CAEA;;AACA,MAAMC,IAAI,GAAG,IAAIJ,MAAJ,CAAWK,OAAO,CAACC,GAAR,CAAYC,kBAAZ,GAAiC,QAA5C,CAAb;AACA,MAAMC,WAAW,GAAGP,KAAK,CAACQ,IAAN,CAAWL,IAAX,CAApB,C,CAEA;;AACAI,WAAW,CAACE,OAAZ,CAAoB,EAApB,EAAwBC,KAAK,IAAI;AAC7BC,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBF,KAAzB;AAEAH,EAAAA,WAAW,CAACM,SAAZ,CAAsB,aAAtB,EAAqCC,IAAI,IAAI;AACzCH,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBE,IAAvB;AACH,GAFD;AAIAP,EAAAA,WAAW,CAACM,SAAZ,CAAsB,eAAtB,EAAuCC,IAAI,IAAI;AAC3C,QAAIC,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWH,IAAI,CAACI,IAAhB,CAAjB;AACAjB,IAAAA,KAAK,CAACkB,QAAN,CAAejB,cAAc,CAACa,UAAD,CAA7B;AACH,GAHD;AAKAR,EAAAA,WAAW,CAACM,SAAZ,CAAsB,qBAAtB,EAA6CC,IAAI,IAAI;AACjD,QAAIM,SAAS,GAAGJ,IAAI,CAACC,KAAL,CAAWH,IAAI,CAACI,IAAhB,CAAhB;AACAP,IAAAA,OAAO,CAACC,GAAR,CAAYQ,SAAZ;AACH,GAHD;AAKAC,EAAAA,IAAI,CAAC;AACDC,IAAAA,QAAQ,EAAE,SADT;AAEDC,IAAAA,KAAK,EAAE;AAFN,GAAD,EAGD,oBAHC,CAAJ;AAIH,CArBD;;AAuBA,SAASF,IAAT,CAAcG,UAAd,EAA0BC,KAA1B,EAAiC;AAC7BlB,EAAAA,WAAW,CAACc,IAAZ,CAAiBI,KAAjB,EAAwB,EAAxB,EAA4BT,IAAI,CAACU,SAAL,CAAeF,UAAf,CAA5B;AACH;;AAED,eAAejB,WAAf","sourcesContent":["import SockJS from 'sockjs-client';\nimport Stomp from 'stompjs';\nimport store from '../redux-store/store';\nimport { takeDataSensor } from '../redux-store/actions/sensor-actions';\n\n// Create connection via sockjs and stompjs\nconst sock = new SockJS(process.env.REACT_APP_API_ROOT + '/stomp');\nconst stompClient = Stomp.over(sock);\n\n// On connected\nstompClient.connect({}, frame => {\n    console.log(\"connected\", frame);\n\n    stompClient.subscribe(\"/topic/info\", data => {\n        console.log(\"receive\", data);\n    });\n\n    stompClient.subscribe(\"/topic/sensor\", data => {\n        let sensorData = JSON.parse(data.body);\n        store.dispatch(takeDataSensor(sensorData));\n    });\n\n    stompClient.subscribe(\"/topic/motor/status\", data => {\n        let motorData = JSON.parse(data.body);\n        console.log(motorData);\n    });\n\n    send({\n        deviceId: 'Speaker',\n        value: 2222\n    }, '/app/motor/control');\n});\n\nfunction send(dataObject, topic) {\n    stompClient.send(topic, {}, JSON.stringify(dataObject));\n}\n\nexport default stompClient;\n"]},"metadata":{},"sourceType":"module"}