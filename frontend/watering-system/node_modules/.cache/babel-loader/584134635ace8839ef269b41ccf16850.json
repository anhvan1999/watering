{"ast":null,"code":"import SockJS from 'sockjs-client';\nimport Stomp from 'stompjs';\nimport store from '../redux-store/store';\nimport { takeDataSensor } from '../redux-store/actions/sensor-actions';\nimport { takeDataMotor } from '../redux-store/actions/motor-actions'; // Create connection via sockjs and stompjs\n\nconst sock = new SockJS(process.env.REACT_APP_API_ROOT + '/stomp');\nconst stompClient = Stomp.over(sock); // On connected\n\nstompClient.connect({}, frame => {\n  console.log(\"connected\", frame);\n  stompClient.subscribe(\"/topic/info\", data => {\n    console.log(\"receive\", data);\n  });\n  stompClient.subscribe(\"/topic/sensor\", data => {\n    let sensorData = JSON.parse(data.body);\n    console.log(sensorData);\n    store.dispatch(takeDataSensor(sensorData));\n  });\n  stompClient.subscribe(\"/topic/motor/status\", data => {\n    let motorData = JSON.parse(data.body);\n    console.log(motorData);\n    store.dispatch(takeDataMotor(motorData));\n  });\n  controlMotor('Speaker', 1000);\n});\n\nfunction send(dataObject, topic) {\n  stompClient.send(topic, {}, JSON.stringify(dataObject));\n}\n\nexport function controlMotor(deviceId, value) {\n  send({\n    deviceId,\n    value\n  }, '/app/motor/control');\n}\nexport default stompClient;","map":{"version":3,"sources":["/home/trongtrung/Shoto-kun/TTDADN/watering-system/frontend/watering-system/src/service/ws-service.js"],"names":["SockJS","Stomp","store","takeDataSensor","takeDataMotor","sock","process","env","REACT_APP_API_ROOT","stompClient","over","connect","frame","console","log","subscribe","data","sensorData","JSON","parse","body","dispatch","motorData","controlMotor","send","dataObject","topic","stringify","deviceId","value"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,eAAnB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,KAAP,MAAkB,sBAAlB;AACA,SAASC,cAAT,QAA+B,uCAA/B;AACA,SAASC,aAAT,QAA8B,sCAA9B,C,CAEA;;AACA,MAAMC,IAAI,GAAG,IAAIL,MAAJ,CAAWM,OAAO,CAACC,GAAR,CAAYC,kBAAZ,GAAiC,QAA5C,CAAb;AACA,MAAMC,WAAW,GAAGR,KAAK,CAACS,IAAN,CAAWL,IAAX,CAApB,C,CAEA;;AACAI,WAAW,CAACE,OAAZ,CAAoB,EAApB,EAAwBC,KAAK,IAAI;AAC/BC,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBF,KAAzB;AAEAH,EAAAA,WAAW,CAACM,SAAZ,CAAsB,aAAtB,EAAqCC,IAAI,IAAI;AAC3CH,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBE,IAAvB;AACD,GAFD;AAIAP,EAAAA,WAAW,CAACM,SAAZ,CAAsB,eAAtB,EAAuCC,IAAI,IAAI;AAC7C,QAAIC,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWH,IAAI,CAACI,IAAhB,CAAjB;AACAP,IAAAA,OAAO,CAACC,GAAR,CAAYG,UAAZ;AACAf,IAAAA,KAAK,CAACmB,QAAN,CAAelB,cAAc,CAACc,UAAD,CAA7B;AACD,GAJD;AAMAR,EAAAA,WAAW,CAACM,SAAZ,CAAsB,qBAAtB,EAA6CC,IAAI,IAAI;AACnD,QAAIM,SAAS,GAAGJ,IAAI,CAACC,KAAL,CAAWH,IAAI,CAACI,IAAhB,CAAhB;AACAP,IAAAA,OAAO,CAACC,GAAR,CAAYQ,SAAZ;AACApB,IAAAA,KAAK,CAACmB,QAAN,CAAejB,aAAa,CAACkB,SAAD,CAA5B;AACD,GAJD;AAMAC,EAAAA,YAAY,CAAC,SAAD,EAAY,IAAZ,CAAZ;AACD,CApBD;;AAsBA,SAASC,IAAT,CAAcC,UAAd,EAA0BC,KAA1B,EAAiC;AAC/BjB,EAAAA,WAAW,CAACe,IAAZ,CAAiBE,KAAjB,EAAwB,EAAxB,EAA4BR,IAAI,CAACS,SAAL,CAAeF,UAAf,CAA5B;AACD;;AAED,OAAO,SAASF,YAAT,CAAsBK,QAAtB,EAAgCC,KAAhC,EAAuC;AAC5CL,EAAAA,IAAI,CAAC;AACHI,IAAAA,QADG;AACOC,IAAAA;AADP,GAAD,EAED,oBAFC,CAAJ;AAGD;AAED,eAAepB,WAAf","sourcesContent":["import SockJS from 'sockjs-client';\nimport Stomp from 'stompjs';\nimport store from '../redux-store/store';\nimport { takeDataSensor } from '../redux-store/actions/sensor-actions';\nimport { takeDataMotor } from '../redux-store/actions/motor-actions'\n\n// Create connection via sockjs and stompjs\nconst sock = new SockJS(process.env.REACT_APP_API_ROOT + '/stomp');\nconst stompClient = Stomp.over(sock);\n\n// On connected\nstompClient.connect({}, frame => {\n  console.log(\"connected\", frame);\n\n  stompClient.subscribe(\"/topic/info\", data => {\n    console.log(\"receive\", data);\n  });\n\n  stompClient.subscribe(\"/topic/sensor\", data => {\n    let sensorData = JSON.parse(data.body);\n    console.log(sensorData);\n    store.dispatch(takeDataSensor(sensorData));\n  });\n\n  stompClient.subscribe(\"/topic/motor/status\", data => {\n    let motorData = JSON.parse(data.body);\n    console.log(motorData);\n    store.dispatch(takeDataMotor(motorData));\n  });\n\n  controlMotor('Speaker', 1000);\n});\n\nfunction send(dataObject, topic) {\n  stompClient.send(topic, {}, JSON.stringify(dataObject));\n}\n\nexport function controlMotor(deviceId, value) {\n  send({\n    deviceId, value\n  }, '/app/motor/control');\n}\n\nexport default stompClient;\n"]},"metadata":{},"sourceType":"module"}